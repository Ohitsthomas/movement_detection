#include <Wire.h>
#include <VL53L1X.h>
#include <SPI.h>

// --- Globale Deklarationen ganz oben ---
// Anzahl der Sensoren und XSHUT-Pins
const uint8_t sensorCount = 2;
const uint8_t xshutPins[sensorCount] = { 4, 3 };

// Die Sensor-Objekte
VL53L1X sensors[sensorCount];

// Poti über MCP42010 / SPI
const byte csPin = 2;
const byte pot1  = 0x12;

// Front-Sensor (variable Geschwindigkeit)
const int frontMinDist = 200;
const int frontMaxDist = 2300;

// Rampen-Sensor (On/Off zwischen 200 mm und 1700 mm)
const int rampMinDist       = 200;
const int rampMaxDist       = 1700;
const int rampOverrideValue = 80;

void setup() {
  Serial.begin(115200);
  while(!Serial);

  Wire.begin();
  Wire.setClock(400000);

  // Sensoren resetten
  for (uint8_t i=0; i<sensorCount; i++){
    pinMode(xshutPins[i], OUTPUT);
    digitalWrite(xshutPins[i], LOW);
  }

  // Sensoren nacheinander hochfahren und konfigurieren
  for (uint8_t i=0; i<sensorCount; i++){
    pinMode(xshutPins[i], INPUT);
    delay(10);
    sensors[i].setTimeout(500);
    if (sensors[i].init()) {
      sensors[i].setAddress(0x2A + i);
      sensors[i].setDistanceMode(VL53L1X::Long);
      sensors[i].setMeasurementTimingBudget(30000);
      sensors[i].startContinuous(50);
      Serial.print("Sensor "); Serial.print(i); Serial.println(" OK");
    } else {
      Serial.print("⚠️ Sensor "); Serial.print(i); Serial.println(" FEHLER");
    }
    delay(10);
  }

  pinMode(csPin, OUTPUT);
  digitalWrite(csPin, HIGH);
  SPI.begin();

  Serial.println("Setup fertig!");
}

void loop() {
  // 1) Einlesen
  int distRamp  = sensors[0].read();
  int distFront = sensors[1].read();

  // 2) smoothing für Front-Sensor
  static float smooth = frontMaxDist;

  // 3) Rampen-Zone prüfen
  bool rampActive = (distRamp > rampMinDist && distRamp < rampMaxDist);

  int value;
  if (rampActive) {
    // Hier wird die Geschwindigkeit des Rampen-Sensors festgelegt:
    // Konstant auf den Override-Wert eingestellt, wenn innerhalb der definierten Zone.
    value = rampOverrideValue;
  }
  else {
    // Front-Logik
    if (distFront > 50 && distFront < 4000)
      smooth = 0.5f * smooth + 0.5f * distFront;

    if (smooth <= frontMinDist)      value = 255;
    else if (smooth >= frontMaxDist) value = 0;
    else                              value = map((int)smooth, frontMinDist, frontMaxDist, 255, 0);

    value = 255 - value;
  }

  // 4) Debug + Poti
  Serial.print("Ramp:"); Serial.print(distRamp);
  Serial.print(rampActive ? " ON" : " off");
  Serial.print("  Front:"); Serial.print(distFront);
  Serial.print("  smooth:"); Serial.print((int)smooth);
  Serial.print("  → Poti:"); Serial.println(value);

  setPoti(pot1, value);
  delay(50);
}

// MCP42010-Helfer
void setPoti(byte addr, byte value) {
  value = constrain(value, 0, 255);
  SPI.beginTransaction(SPISettings(1000000, MSBFIRST, SPI_MODE0));
    digitalWrite(csPin, LOW);
    SPI.transfer(addr);
    SPI.transfer(value);
    digitalWrite(csPin, HIGH);
  SPI.endTransaction();
}
