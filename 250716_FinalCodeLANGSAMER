#include <Wire.h>
#include <VL53L1X.h>
#include <SPI.h>

#include <WiFiS3.h>
#include <WiFiUdp.h>
#include <OSCMessage.h>

// WiFi Setup
const char* ssid = "EasyBox-640692";
const char* password = "ZiDTuMtLdMMXB5HX";
// OSC destination
IPAddress outIp(192, 168, 2, 109);
unsigned int outPort1 = 8030;
WiFiUDP Udp;
unsigned long lastSend = 0;
const unsigned long sendInterval = 5000;
int valueToSend = 0; 

// --- Globale Deklarationen ---
const uint8_t sensorCount = 2;
const uint8_t xshutPins[sensorCount] = { 4, 3 };  // [0]=Rampeâ†’D4, [1]=Frontâ†’D3
VL53L1X sensors[sensorCount];

const byte csPin = 2;
const byte pot1 = 0x12;

// --- GlÃ¤ttung ---
const uint8_t SMOOTHING_WINDOW = 8;
int distHistory[sensorCount][SMOOTHING_WINDOW] = { 5 };
uint8_t historyIndex = 0;

// --- Logik ---
int previousValue = 0;
const int STABILIZATION_THRESHOLD = 10;  // Nur bei Ã„nderung >10 wird neu gesetzt

// --- Setup ---
void setup() {
// Connect to WiFi
 while (WiFi.begin(ssid, password) != WL_CONNECTED) {
 delay(1000);
 }
 Udp.begin(outPort1); 
 delay(1000);


  Serial.begin(115200);
  while (!Serial);

  Wire.begin();
  Wire.setClock(400000);

  for (uint8_t i = 0; i < sensorCount; i++) {
    pinMode(xshutPins[i], OUTPUT);
    digitalWrite(xshutPins[i], LOW);
  }
  delay(100);

  for (uint8_t i = 0; i < sensorCount; i++) {
    pinMode(xshutPins[i], INPUT);
    delay(10);
    sensors[i].setTimeout(500);

    for (uint8_t attempt = 0; attempt < 3; attempt++) {
      if (sensors[i].init()) {
        sensors[i].setAddress(0x2A + i);
        sensors[i].setDistanceMode(VL53L1X::Long);
        sensors[i].setMeasurementTimingBudget(33000);
        sensors[i].startContinuous(50);
        Serial.print("âœ… Sensor "); Serial.print(i); Serial.println(" bereit");
        break;
      }
      delay(100);
    }
  }

  pinMode(csPin, OUTPUT);
  digitalWrite(csPin, HIGH);
  SPI.begin();

  Serial.println("ðŸ”§ Setup abgeschlossen");
}

// --- Gleitender Mittelwert ---
int getSmoothedDistance(uint8_t sensorIndex, int newValue, int lastValid) {
  if (newValue < 50 || newValue > 4000) newValue = lastValid;

  distHistory[sensorIndex][historyIndex] = newValue;

  int sum = 0;
  for (uint8_t i = 0; i < SMOOTHING_WINDOW; i++) {
    sum += distHistory[sensorIndex][i];
  }

  return sum / SMOOTHING_WINDOW;
}

// --- Loop ---
void loop() {
  unsigned long now = millis(); 
  static int lastValidRamp = 500;
  static int lastValidFront = 500;

  int rawRamp = sensors[0].read();
  int rawFront = sensors[1].read();

  int distRamp  = getSmoothedDistance(0, rawRamp, lastValidRamp);
  int distFront = getSmoothedDistance(1, rawFront, lastValidFront);

  lastValidRamp = distRamp;
  lastValidFront = distFront;
  historyIndex = (historyIndex + 1) % SMOOTHING_WINDOW;

  // --- Neue Ziel-Value berechnen ---
  int targetValue = 0;

  // Rampe: fixer Wert 127 bei 920â€“2000 mm
  if (distRamp >= 1000 && distRamp <= 1900) {
    targetValue = 127;
  }

  // Front: dynamisch von 1400 â†’ 240 (100 â†’ 220)
  if (distFront < 1700) {
    int valueFront = map(distFront, 1700, 460, 92, 220);
    valueFront = constrain(valueFront, 100, 255);
    targetValue = max(targetValue, valueFront);
  }

  // --- Hysterese: nur reagieren bei nennenswerter Ã„nderung ---
  if (abs(targetValue - previousValue) >= STABILIZATION_THRESHOLD || targetValue == 0) {
    previousValue = targetValue;

    // SPI: Wert setzen
    SPI.beginTransaction(SPISettings(1000000, MSBFIRST, SPI_MODE0));
      digitalWrite(csPin, LOW);
      SPI.transfer(pot1);
      SPI.transfer(previousValue);
      digitalWrite(csPin, HIGH);
    SPI.endTransaction();
  }

  // Debug
  Serial.print("Ramp: "); Serial.print(distRamp);
  Serial.print(" mm, Front: "); Serial.print(distFront);
  Serial.print(" mm â†’ value = "); Serial.println(previousValue);

  delay(50);  // Schneller reagieren
   // Send OSC message with valueToSend (0 or 1)
 if (now - lastSend >= sendInterval) {
 lastSend = now;
 // Send OSC message with valueToSend (0 or 1)
 OSCMessage msg("/toggle");
 msg.add(previousValue);
 Udp.beginPacket(outIp, outPort1);
 msg.send(Udp);
 Udp.endPacket();
 msg.empty();
 // Toggle value for next send
 valueToSend = 1 - valueToSend;
 }

}
